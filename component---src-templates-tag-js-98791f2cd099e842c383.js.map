{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["PageTitle","styled","h1","Container","div","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","title","map","node","slug","fields","excerpt","frontmatter"],"mappings":"4FAAA,gFAUMA,EAAWC,IAAOC,GAAT,qEAAED,CAAF,kBAITE,EAAYF,IAAOG,IAAV,qEAAGH,CAAH,yDAkCAI,UA5BF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKK,MAAOL,IACZ,gCACE,kBAACR,EAAD,KAAYY,GACZ,kBAACT,EAAD,KACKO,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACFE,EAAUH,EAAKG,QACrB,OACE,kBAAC,IAAD,CAAMC,YAAaJ,EAAKI,YAAaH,KAAMA,EAAME,QAASA","file":"component---src-templates-tag-js-98791f2cd099e842c383.js","sourcesContent":["import React from \"react\"\nimport Layout from '../components/layout'\nimport SEO from \"../components/seo\"\nimport styled from 'styled-components'\nimport Card from \"../components/card\"\n\n\n// Components\nimport { graphql } from \"gatsby\"\n\nconst PageTitle= styled.h1`\n  color: white;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content:center;\n`;\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={tag}/>\n      <center>\n        <PageTitle>{tagHeader}</PageTitle>\n        <Container>\n            {edges.map(({ node }) => {\n              const { slug } = node.fields\n              const excerpt = node.excerpt;\n              return (\n                <Card frontmatter={node.frontmatter} slug={slug} excerpt={excerpt}/>\n              )\n            })}\n        </Container>\n      </center>\n    </Layout>\n    \n      \n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM Do, YYYY\")\n            tags\n            featuredImage {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt(format: PLAIN)\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}